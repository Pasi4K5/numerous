// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Numerous.Database.Context;

#nullable disable

namespace Numerous.Database.Migrations
{
    [DbContext(typeof(NumerousDbContext))]
    [Migration("20250324073517_AddSetPlayCount")]
    partial class AddSetPlayCount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Numerous.Database.Entities.DbAutoPingMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role_id");

                    b.Property<decimal?>("TagId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_auto_ping_mapping");

                    b.HasIndex("ChannelId", "TagId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_auto_ping_mapping_channel_id_tag_id_role_id");

                    b.ToTable("auto_ping_mapping", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapCompetition", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<Guid>("LocalBeatmapId")
                        .HasColumnType("uuid")
                        .HasColumnName("local_beatmap_id");

                    b.HasKey("GuildId", "StartTime")
                        .HasName("pk_beatmap_competition");

                    b.HasIndex("LocalBeatmapId")
                        .HasDatabaseName("ix_beatmap_competition_local_beatmap_id");

                    b.ToTable("beatmap_competition", null, t =>
                        {
                            t.HasCheckConstraint("CK_BeatmapCompetition_ValidTime", "\"StartTime\" < \"EndTime\"");
                        });
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapCompetitionScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Md5Hash");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("accuracy");

                    b.Property<Instant>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<long>("GreatCount")
                        .HasColumnType("bigint")
                        .HasColumnName("great_count");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<long>("MaxCombo")
                        .HasColumnType("bigint")
                        .HasColumnName("max_combo");

                    b.Property<long>("MehCount")
                        .HasColumnType("bigint")
                        .HasColumnName("meh_count");

                    b.Property<long>("MissCount")
                        .HasColumnType("bigint")
                        .HasColumnName("miss_count");

                    b.PrimitiveCollection<string[]>("Mods")
                        .IsRequired()
                        .HasColumnType("char(2)[]")
                        .HasColumnName("mods");

                    b.Property<long>("OkCount")
                        .HasColumnType("bigint")
                        .HasColumnName("ok_count");

                    b.Property<decimal?>("OnlineId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("online_id");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<long>("TotalScore")
                        .HasColumnType("bigint")
                        .HasColumnName("total_score");

                    b.HasKey("Id")
                        .HasName("pk_beatmap_competition_score");

                    b.HasIndex("OnlineId")
                        .IsUnique()
                        .HasDatabaseName("ix_beatmap_competition_score_online_id");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("ix_beatmap_competition_score_player_id");

                    b.HasIndex("GuildId", "StartTime")
                        .HasDatabaseName("ix_beatmap_competition_score_guild_id_start_time");

                    b.ToTable("beatmap_competition_score", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapStats", b =>
                {
                    b.Property<long>("BeatmapId")
                        .HasColumnType("bigint")
                        .HasColumnName("beatmap_id");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("PassCount")
                        .HasColumnType("integer")
                        .HasColumnName("pass_count");

                    b.Property<int>("PlayCount")
                        .HasColumnType("integer")
                        .HasColumnName("play_count");

                    b.HasKey("BeatmapId", "Timestamp")
                        .HasName("pk_beatmap_stats");

                    b.ToTable("beatmap_stats", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapsetStats", b =>
                {
                    b.Property<long>("BeatmapsetId")
                        .HasColumnType("bigint")
                        .HasColumnName("beatmapset_id");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("FavouriteCount")
                        .HasColumnType("integer")
                        .HasColumnName("favourite_count");

                    b.Property<int>("PlayCount")
                        .HasColumnType("integer")
                        .HasColumnName("play_count");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("BeatmapsetId", "Timestamp")
                        .HasName("pk_beatmapset_stats");

                    b.ToTable("beatmapset_stats", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.HasKey("Id");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_channel_guild_id");

                    b.ToTable("channel");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbDiscordMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<decimal?>("ReferenceMessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("reference_message_id");

                    b.HasKey("Id")
                        .HasName("pk_discord_message");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_discord_message_author_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_discord_message_channel_id");

                    b.HasIndex("ReferenceMessageId")
                        .HasDatabaseName("ix_discord_message_reference_message_id");

                    b.ToTable("discord_message", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbDiscordMessageVersion", b =>
                {
                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("message_id");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("CleanContent")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("clean_content")
                        .HasComment("If NULL, the clean content is the same as the raw content.");

                    b.Property<string>("RawContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("raw_content");

                    b.HasKey("MessageId", "Timestamp")
                        .HasName("pk_discord_message_version");

                    b.ToTable("discord_message_version", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbDiscordUser", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("time_zone_id");

                    b.HasKey("Id")
                        .HasName("pk_discord_user");

                    b.ToTable("discord_user", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbGroupRoleMapping", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role_id");

                    b.Property<short>("Group")
                        .HasColumnType("smallint")
                        .HasColumnName("group_id");

                    b.HasKey("GuildId", "RoleId", "Group")
                        .HasName("pk_group_role_mapping");

                    b.ToTable("group_role_mapping", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbGuild", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<bool>("GreetOnAdded")
                        .HasColumnType("boolean")
                        .HasColumnName("greet_on_added");

                    b.Property<decimal?>("MapfeedChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("mapfeed_channel_id");

                    b.Property<bool>("TrackMessages")
                        .HasColumnType("boolean")
                        .HasColumnName("track_messages");

                    b.Property<decimal?>("UnverifiedRoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("unverified_role_id");

                    b.HasKey("Id")
                        .HasName("pk_guild");

                    b.HasIndex("MapfeedChannelId")
                        .IsUnique()
                        .HasDatabaseName("ix_guild_mapfeed_channel_id");

                    b.HasIndex("UnverifiedRoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_guild_unverified_role_id");

                    b.ToTable("guild", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbGuildStatsEntry", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("MemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("member_count");

                    b.HasKey("GuildId", "Timestamp")
                        .HasName("pk_guild_stats_entry");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_guild_stats_entry_guild_id");

                    b.ToTable("guild_stats_entry", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbJoinMessage", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("GuildId")
                        .HasName("pk_join_message");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_join_message_channel_id");

                    b.ToTable("join_message", null, t =>
                        {
                            t.HasCheckConstraint("CK_JoinMessage_HasText", "\"Title\" IS NOT NULL OR \"Description\" IS NOT NULL");
                        });
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbLocalBeatmap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("md5_hash");

                    b.Property<long>("MaxCombo")
                        .HasColumnType("bigint")
                        .HasColumnName("max_combo");

                    b.Property<long>("OnlineBeatmapId")
                        .HasColumnType("bigint")
                        .HasColumnName("online_beatmap_id");

                    b.Property<string>("OsuText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("osu_text");

                    b.Property<byte[]>("OszHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("osz_hash");

                    b.HasKey("Id")
                        .HasName("pk_local_beatmap");

                    b.HasIndex("OnlineBeatmapId")
                        .HasDatabaseName("ix_local_beatmap_online_beatmap_id");

                    b.ToTable("local_beatmap", null, t =>
                        {
                            t.HasCheckConstraint("CK_LocalBeatmap_ValidSha256", "length(\"OszHash\") = 256 / 8");
                        });
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOnlineBeatmap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("OnlineBeatmapsetId")
                        .HasColumnType("bigint")
                        .HasColumnName("online_beatmapset_id");

                    b.HasKey("Id")
                        .HasName("pk_online_beatmap");

                    b.HasIndex("OnlineBeatmapsetId")
                        .HasDatabaseName("ix_online_beatmap_online_beatmapset_id");

                    b.ToTable("online_beatmap", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOnlineBeatmapset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_id");

                    b.HasKey("Id")
                        .HasName("pk_online_beatmapset");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_online_beatmapset_creator_id");

                    b.ToTable("online_beatmapset", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOsuUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.HasKey("Id")
                        .HasName("pk_osu_user");

                    b.HasIndex("DiscordUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_osu_user_discord_user_id");

                    b.ToTable("osu_user", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOsuUserStats", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("FollowerCount")
                        .HasColumnType("integer")
                        .HasColumnName("follower_count");

                    b.Property<int>("SubscriberCount")
                        .HasColumnType("integer")
                        .HasColumnName("subscriber_count");

                    b.HasKey("UserId", "Timestamp")
                        .HasName("pk_osu_user_stats");

                    b.ToTable("osu_user_stats", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbReminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<string>("Message")
                        .HasMaxLength(6000)
                        .HasColumnType("character varying(6000)")
                        .HasColumnName("message");

                    b.Property<Instant>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reminder");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_reminder_channel_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reminder_user_id");

                    b.ToTable("reminder", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbReplay", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("md5_hash");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.HasKey("Id")
                        .HasName("pk_replay");

                    b.ToTable("replay", (string)null);
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbForumChannel", b =>
                {
                    b.HasBaseType("Numerous.Database.Entities.DbChannel");

                    b.ToTable("forum_channel");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbMessageChannel", b =>
                {
                    b.HasBaseType("Numerous.Database.Entities.DbChannel");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read_only");

                    b.ToTable("message_channel");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbAutoPingMapping", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbForumChannel", "Channel")
                        .WithMany("AutoPingMappings")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auto_ping_mapping_forum_channel_channel_id");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapCompetition", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbGuild", "Guild")
                        .WithMany("BeatmapCompetitions")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beatmap_competition_guild_guild_id");

                    b.HasOne("Numerous.Database.Entities.DbLocalBeatmap", "LocalBeatmap")
                        .WithMany("BeatmapCompetitions")
                        .HasForeignKey("LocalBeatmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beatmap_competition_local_beatmap_local_beatmap_id");

                    b.Navigation("Guild");

                    b.Navigation("LocalBeatmap");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapCompetitionScore", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbOsuUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beatmap_competition_score_osu_user_player_id");

                    b.HasOne("Numerous.Database.Entities.DbBeatmapCompetition", "Competition")
                        .WithMany("Scores")
                        .HasForeignKey("GuildId", "StartTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beatmap_competition_score_beatmap_competition_guild_id_star");

                    b.Navigation("Competition");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapStats", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbOnlineBeatmap", "Beatmap")
                        .WithMany("Stats")
                        .HasForeignKey("BeatmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beatmap_stats_online_beatmap_beatmap_id");

                    b.Navigation("Beatmap");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapsetStats", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbOnlineBeatmapset", "Beatmapset")
                        .WithMany("Stats")
                        .HasForeignKey("BeatmapsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_beatmapset_stats_online_beatmapset_beatmapset_id");

                    b.Navigation("Beatmapset");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbChannel", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbGuild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_guild_guild_id");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbDiscordMessage", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbDiscordUser", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discord_message_discord_user_author_id");

                    b.HasOne("Numerous.Database.Entities.DbMessageChannel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discord_message_message_channel_channel_id");

                    b.HasOne("Numerous.Database.Entities.DbDiscordMessage", "ReferenceMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ReferenceMessageId")
                        .HasConstraintName("fk_discord_message_discord_message_reference_message_id");

                    b.Navigation("Author");

                    b.Navigation("Channel");

                    b.Navigation("ReferenceMessage");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbDiscordMessageVersion", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbDiscordMessage", "Message")
                        .WithMany("Versions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discord_message_version_discord_message_message_id");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbGroupRoleMapping", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbGuild", "Guild")
                        .WithMany("GroupRoleMappings")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_role_mapping_guild_guild_id");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbGuild", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbChannel", "MapfeedChannel")
                        .WithOne()
                        .HasForeignKey("Numerous.Database.Entities.DbGuild", "MapfeedChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_guild_channel_mapfeed_channel_id");

                    b.Navigation("MapfeedChannel");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbGuildStatsEntry", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbGuild", "Guild")
                        .WithMany("Stats")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_guild_stats_entry_guild_guild_id");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbJoinMessage", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbMessageChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_join_message_message_channel_channel_id");

                    b.HasOne("Numerous.Database.Entities.DbGuild", "Guild")
                        .WithOne("JoinMessage")
                        .HasForeignKey("Numerous.Database.Entities.DbJoinMessage", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_join_message_guild_guild_id");

                    b.Navigation("Channel");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbLocalBeatmap", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbOnlineBeatmap", "OnlineBeatmap")
                        .WithMany("LocalBeatmaps")
                        .HasForeignKey("OnlineBeatmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_local_beatmap_online_beatmap_online_beatmap_id");

                    b.Navigation("OnlineBeatmap");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOnlineBeatmap", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbOnlineBeatmapset", "OnlineBeatmapset")
                        .WithMany("Beatmaps")
                        .HasForeignKey("OnlineBeatmapsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_online_beatmap_online_beatmapset_online_beatmapset_id");

                    b.Navigation("OnlineBeatmapset");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOnlineBeatmapset", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbOsuUser", "Creator")
                        .WithMany("OnlineBeatmapsets")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_online_beatmapset_osu_user_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOsuUser", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbDiscordUser", "DiscordUser")
                        .WithOne("OsuUser")
                        .HasForeignKey("Numerous.Database.Entities.DbOsuUser", "DiscordUserId")
                        .HasConstraintName("fk_osu_user_discord_user_discord_user_id");

                    b.Navigation("DiscordUser");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOsuUserStats", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbOsuUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_osu_user_stats_osu_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbReminder", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbMessageChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_reminder_message_channel_channel_id");

                    b.HasOne("Numerous.Database.Entities.DbDiscordUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reminder_discord_user_user_id");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbReplay", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbBeatmapCompetitionScore", "Score")
                        .WithOne("Replay")
                        .HasForeignKey("Numerous.Database.Entities.DbReplay", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_replay_beatmap_competition_score_md5_hash");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbForumChannel", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbChannel", null)
                        .WithOne()
                        .HasForeignKey("Numerous.Database.Entities.DbForumChannel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forum_channel_channel_id");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbMessageChannel", b =>
                {
                    b.HasOne("Numerous.Database.Entities.DbChannel", null)
                        .WithOne()
                        .HasForeignKey("Numerous.Database.Entities.DbMessageChannel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_message_channel_channel_id");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapCompetition", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbBeatmapCompetitionScore", b =>
                {
                    b.Navigation("Replay");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbDiscordMessage", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbDiscordUser", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("OsuUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbGuild", b =>
                {
                    b.Navigation("BeatmapCompetitions");

                    b.Navigation("Channels");

                    b.Navigation("GroupRoleMappings");

                    b.Navigation("JoinMessage");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbLocalBeatmap", b =>
                {
                    b.Navigation("BeatmapCompetitions");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOnlineBeatmap", b =>
                {
                    b.Navigation("LocalBeatmaps");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOnlineBeatmapset", b =>
                {
                    b.Navigation("Beatmaps");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbOsuUser", b =>
                {
                    b.Navigation("OnlineBeatmapsets");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbForumChannel", b =>
                {
                    b.Navigation("AutoPingMappings");
                });

            modelBuilder.Entity("Numerous.Database.Entities.DbMessageChannel", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
